runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
maxDate <- df_campus_data %>%
summarise(max = max(date))
maxDate
minDate <- df_campus_data %>%
summarise(min = min(date))
minDate
runApp()
maxDate <- df_campus_data %>%
summarise(max = max(date))
minDate <- df_campus_data %>%
summarise(min = min(date))
dates <- seq(minDate, maxDate, by = 'days')
dates
maxDate <- df_campus_data %>%
summarise(max = max(date))
minDate <- df_campus_data %>%
summarise(min = min(date))
dates <- seq(minDate, maxDate, by = 'days')
maxDate <- df_campus_data %>%
summarise(max = max(date))
minDate <- df_campus_data %>%
summarise(min = min(date))
dates <- seq(as.Date(minDate), as.Date(maxDate), by = 'days')
minDate
minDate[[1]]
dates <- seq(as.Date(minDate[[1]]), as.Date(maxDate[[1]]), by = 'days')
dates
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(rsconnect)
rsconnect::setAccountInfo(name='collegecrisis',
token='AF64BCD27E0817D85F59DB464B886A5A',
secret='VlWDZZCF0kXVfgeD8bLQeIKN4cqPd4rwriznNyTq')
runApp('~/Documents/Github/Davidson-CV-19-Dashboard/Back-End')
runApp()
runApp()
devtools::install_github('rstudio/shinyloadtest')
devtools::install_github('rstudio/shinyloadtest')
sudo cp shinycannon-1.0.0-9b22a92.sh /usr/local/bin/shinycannon; sudo chmod +x /usr/local/bin/shinycannon
shinyloadtest::record_session('https://collegecrisis.shinyapps.io/CV-19_Front-End/')
runApp()
runApp()
runApp()
df_campus_data <- df_campus_data %>%
mutate(dateFormatted = format(date, "%d %b"))
df_campus_data %>%
e_chart(dateFormatted) %>%
e_bar(
new_cases,
color = red,
name = "New Cases",
stack = "New",
barWidth = "20%"
) %>%
e_legend(show = FALSE) %>%
e_tooltip() %>%
e_y_axis(formatter = htmlwidgets::JS(wholeNumFormatter), max = 10) %>%
e_grid(bottom = "30%", top = "10%")
runApp()
runApp()
runApp()
df_campus_data <- df_campus_data %>%
mutate(dateFormatted = format(date, "%d %b"))
df_campus_data %>%
e_chart(dateFormatted) %>%
e_bar(
current_cases,
color = red,
name = "Active Cases",
stack = "Active",
barWidth = "20%"
) %>%
e_legend(show = FALSE) %>%
e_tooltip() %>%
e_y_axis(formatter = htmlwidgets::JS(wholeNumFormatter), max = barMax) %>%
e_grid(bottom = "30%", top = "10%")
runApp()
runApp()
df_campus_data <- df_campus_data %>%
mutate(dateFormatted = format(date, "%d %b"))
df_campus_data %>%
e_chart(dateFormatted) %>%
e_bar(
current_cases,
color = red,
name = "Active Cases",
stack = "Active",
barWidth = "20%"
) %>%
e_legend(show = FALSE) %>%
e_tooltip() %>%
e_y_axis(formatter = htmlwidgets::JS(wholeNumFormatter), max = barMax) %>%
e_grid(bottom = "30%", top = "10%")
df_campus_data
runApp()
df_campus_data <- df_campus_data %>%
mutate(dateFormatted = format(date, "%d %b"))
df_campus_data %>%
e_chart(dateFormatted) %>%
e_bar(
current_cases,
color = red,
name = "Active Cases",
stack = "Active",
barWidth = "20%"
) %>%
e_legend(show = FALSE) %>%
e_tooltip() %>%
e_y_axis(formatter = htmlwidgets::JS(wholeNumFormatter), max = barMax) %>%
e_grid(bottom = "30%", top = "10%")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?e_title()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
?fluidRow()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?textOutput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
paste0("Last Updated: ", format(maxDate, "%Y-%M-%d"))
runApp()
paste0("Last Updated: ", format(maxDate, "%Y-%M-%d"))
paste0("Last Updated: ", format(maxDate$max[[1]], "%Y-%M-%d"))
paste0("Last Updated: ", format(maxDate$max[[1]], "%a, %B-%d"))
paste0("Last Updated: ", format(maxDate$max[[1]], "%A, %B %d"))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
maxDate <- df_campus_data %>%
summarise(max = max(current_cases))
maxDate
runApp()
maxCases <- df_campus_data %>%
summarise(max = max(current_cases))
barMax <- roundTo(maxCases$max[[1]]*1.5, 5)
barMax <- RoundTo(maxCases$max[[1]]*1.5, 5)
barMax <- round(maxCases$max[[1]]*1.5, 5)
barMax
barMax <- round(maxCases$max[[1]]*1.5)
barMax
runApp()
install(DescTools)
install.packages("DescTools")
library(DescTools)
runApp()
runApp()
RoundTo(120.12, 5)
runApp()
shiny::runApp()
runApp()
runApp()
df_campus_data <-
read_sheet(
"https://docs.google.com/spreadsheets/d/1Cz-wwT0nyWytRImkzCGDPaY1YrOSILM74mXAgU_eGcE/edit#gid=509821006"
)
df_campus_data
df_campus_data <-
read_sheet(
"https://docs.google.com/spreadsheets/d/1Cz-wwT0nyWytRImkzCGDPaY1YrOSILM74mXAgU_eGcE/edit#gid=509821006"
)
df_campus_data <-
read_sheet(
"https://docs.google.com/spreadsheets/d/1Cz-wwT0nyWytRImkzCGDPaY1YrOSILM74mXAgU_eGcE/edit#gid=509821006"
)
df_campus_data <-
read_sheet(
"https://docs.google.com/spreadsheets/d/1Cz-wwT0nyWytRImkzCGDPaY1YrOSILM74mXAgU_eGcE/edit#gid=509821006"
)
df_campus_data <-
read_sheet(
"https://docs.google.com/spreadsheets/d/1Cz-wwT0nyWytRImkzCGDPaY1YrOSILM74mXAgU_eGcE/edit#gid=509821006"
)
df_campus_data
runApp()
runApp()
shiny::runApp()
?e_tooltip()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
df_campus_data
df_campus_data <- df_campus_data %>%
mutate(dateFormatted = format(date, "%d %b"))
df_campus_data
df <- df_campus_data %>%
mutate(dateFormatted = format(date, "%d %b")) %>%
mutate(cases = new_cases)
df
df <- df_campus_data %>%
mutate(dateFormatted = format(date, "%d %b")) %>%
mutate(cases = new_cases) %>%
select(cases, dateFormatted)
df
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
df
df %>%
e_chart(label) %>%
e_pie(
`Students`,
color = color,
# name = "Count",
radius = c('30%', '60%'),
center = c('50%', '55%'),
) %>%
e_legend(show = F) %>%
e_title(
paste0(percCases, " are positive for COVID-19"),
paste0("Active on-site ", type) %>%
paste0(" cases / On-site ") %>%
paste0(type) %>%
paste0("s being tested weekly"),
top = 0,
subtextStyle = c(color = sub),
textStyle = c(fontSize = 22, color = main)
) %>%
e_tooltip(position = 'left')
paste0("Active on-site ", type) %>%
paste0(" cases / On-site ") %>%
paste0(type) %>%
paste0("s being tested weekly")
paste0("Active on-site ", type) %>%
paste0(" cases / On-site ") %>%
paste0(type) %>%
paste0("s being tested weekly"),
paste0("Active on-site ", type) %>%
paste0(" cases / On-site ") %>%
paste0(type) %>%
paste0("s being tested weekly")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
df_current_campus
runApp()
runApp()
tail(df_campus_data , 1)
runApp()
tail(df_campus_data , 1)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
(paste0(id, tolower(type)))
runApp()
return (paste0(id, tolower(type)))
(paste0(id, tolower(type)))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
showModal(snapshot()
)
runApp()
showModal(snapshot()
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?modalDialog
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
